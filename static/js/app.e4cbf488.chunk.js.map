{"version":3,"sources":["Common.js","store.js","components/Card.js","components/RNAlert.js","App.js"],"names":["log","console","bind","options","method","headers","useStore","create","set","count","increment","state","en","update","data","meaning","updateMeaning","Card","props","useState","sound","playing","setPlaying","iconName","setIconName","checking","setChecking","text","setText","useEffect","m","map","item","results","i","length","undefined","unloadAsync","View","style","styles","card","cardHeader","TextInput","inputText","placeholder","onChangeText","Button","title","button","onPress","name","Alert","alert","Text","textHeader","word","typeOf","prounciation","size","color","icon","w","Speech","setTimeout","display","checkText","Image","img","source","uri","src","textBody","example","StyleSheet","width","backgroundColor","padding","margin","borderRadius","flexDirection","justifyContent","alignItems","height","borderWidth","marginRight","textAlign","fontSize","marginTop","cursor","defaultProps","App","setWord","setSource","client","createClient","q","setQ","FetchWords","fetch","then","response","json","catch","err","FindImages","query","medium","photos","search","per_page","photo","s","ScrollView","container","cards","def","definition","partOfSpeech","pronunciation","all","StatusBar","flex","flexWrap"],"mappings":"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","file":"static/js/app.e4cbf488.chunk.js","sourcesContent":["export var log = console.log.bind(console);\r\n\r\nexport const fetchUrl = 'https://wordsapiv1.p.rapidapi.com/words/?random=true';\r\nexport const defUrl = (w) => 'https://wordsapiv1.p.rapidapi.com/words/' + w + '/definitions'\r\n\r\nexport const options = {\r\n      method: 'GET',\r\n      headers: {\r\n        'X-RapidAPI-Key': '004c008df7msh873d3c4709f2eb3p15615bjsn6188cad98adb',\r\n        'X-RapidAPI-Host': 'wordsapiv1.p.rapidapi.com'\r\n      }\r\n    };","import create from 'zustand'\r\n\r\nexport const useStore = create(set => ({\r\n  count: 0,\r\n  increment: () => set(state => ({ count: state.count + 1 })),\r\n  en: [],\r\n  update: (data) => set(state => ({ en: [...state.en, data] })),\r\n  meaning: [],\r\n  updateMeaning: (data) => set(state => ({ meaning: [...state.meaning, data] }))\r\n}))","import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Text,\r\n  TextInput,\r\n  View,\r\n  StyleSheet,\r\n  Button,\r\n  Image\r\n} from 'react-native';\r\nimport { Audio } from 'expo-av';\r\nimport Icon from 'react-native-vector-icons/AntDesign';\r\nimport { WrongAlert } from './RNAlert';\r\nimport { log } from '../Common'\r\n//  --legacy-peer-deps\r\nimport { useStore } from '../store';\r\nimport * as Speech from 'expo-speech';\r\n\r\nexport default function Card(props) {\r\n  const [sound, setSound] = useState();\r\n  const [playing, setPlaying] = useState(false);\r\n  const [iconName, setIconName] = useState('play');\r\n  const [checking, setChecking] = useState(false);\r\n  const [text, setText] = useState('');\r\n  const [en, setEn] = useState([])\r\n  const data = useStore(state => state.en)\r\n  const count = useStore(state => state.count)\r\n  const increment = useStore(state => state.increment)\r\n\r\n  useEffect(() => {\r\n    let m = data.map(item => item.results);\r\n    for (let i = 0; i < m.length; i++) {\r\n      if (m[i] !== undefined) {\r\n        // log(count)\r\n        increment()\r\n      }\r\n    }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    return sound\r\n      ? () => {\r\n        console.log('Unloading Sound');\r\n        sound.unloadAsync();\r\n      }\r\n      : undefined;\r\n  }, [sound]);\r\n\r\n  const test = () => {\r\n    setChecking(true);\r\n  }\r\n\r\n  const checkWord = () => {\r\n    log(text)\r\n    log(props.name)\r\n    if (text === props.name) {\r\n      setChecking(false);\r\n    }\r\n    else {\r\n      setChecking(true);\r\n      WrongAlert()\r\n    }\r\n  }\r\n\r\n  const speak = (w) => {\r\n    if (playing) {\r\n      console.log('Loading Sound');\r\n      setIconName('pausecircle');\r\n      Speech.speak(w);\r\n      setTimeout(() => { setIconName('play') }, 1100)\r\n    } else {\r\n      setIconName('play');\r\n      // await sound.unloadAsync();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <View style={styles.card}>\r\n      <View style={styles.cardHeader}>\r\n        {\r\n          checking ? (\r\n            <>\r\n              <TextInput\r\n                style={styles.inputText}\r\n                placeholder=\"\"\r\n                onChangeText={text => setText(text)}\r\n              />\r\n              <Button title=\"Check\"\r\n                style={styles.button}\r\n                onPress={checkWord} />\r\n            </>) : (\r\n            <Text style={[\r\n              styles.text,\r\n              styles.textHeader\r\n            ]}>\r\n              {props.word} ({props.typeOf == \"noun\"\r\n                ? \"n\" : props.typeOf == \"adjective\"\r\n                  ? \"adj\" : props.typeOf == \"verb\"\r\n                    ? \"v\" : props.typeOf[0] + \", \" + props.typeOf[1]})\r\n              {props.prounciation}\r\n            </Text>)\r\n        }\r\n\r\n        <Icon\r\n          name={iconName}\r\n          size={20} color=\"#000\"\r\n          style={styles.icon}\r\n          onPress={() => {\r\n            setPlaying(true);\r\n            speak(props.word)\r\n          }} />\r\n      </View>\r\n      <Text style={\r\n        checking ?\r\n          { display: 'none' }\r\n          : styles.checkText\r\n      }\r\n        onPress={() => { test() }}>\r\n        Check this word\r\n      </Text>\r\n      <Image style={styles.img}\r\n        source={{ uri: props.src }} />\r\n      <Text style={[\r\n        styles.text,\r\n        styles.textBody\r\n      ]}>\r\n        {props.example}\r\n      </Text>\r\n      <Text style={styles.text}>\r\n        {props.meaning}\r\n      </Text>\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  card: {\r\n    width: 300,\r\n    backgroundColor: '#f0f2f5',\r\n    padding: 10,\r\n    margin: 10,\r\n    borderRadius: 7,\r\n  },\r\n  cardHeader: {\r\n    flexDirection: 'row',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n  inputText: {\r\n    height: 30,\r\n    margin: 12,\r\n    borderWidth: 1,\r\n    padding: 10\r\n  },\r\n  button: {\r\n    borderWidth: 1,\r\n    padding: 4\r\n  },\r\n  textHeader: {\r\n    marginRight: 10,\r\n  },\r\n  textBody: {\r\n    textAlign: 'justify',\r\n    fontSize: 18,\r\n  },\r\n  checkText: {\r\n    textAlign: 'center',\r\n    marginTop: 5,\r\n    cursor: 'pointer'\r\n  },\r\n  text: {\r\n    fontSize: 20,\r\n    textAlign: 'center',\r\n  },\r\n  icon: {\r\n    marginTop: 5,\r\n    alignItems: 'center',\r\n  },\r\n  img: {\r\n    width: 300,\r\n    height: 300,\r\n  }\r\n});\r\n\r\nCard.defaultProps = {\r\n  src: \"https://www.seekpng.com/png/detail/968-9681864_apple-png-background-stock-photo-apple-fruit.png\"\r\n}\r\n","import { Alert } from \"react-native\";\r\n\r\nexport function WrongAlert(){\r\n    Alert.alert(\r\n      \"Wrong answer\",\r\n      [\r\n        {\r\n          text: \"Cancel\",\r\n          onPress: () => console.log(\"Cancel Pressed\"),\r\n          style: \"cancel\"\r\n        },\r\n        { text: \"OK\", onPress: () => console.log(\"OK Pressed\") }\r\n      ]\r\n    )\r\n}","import { StatusBar } from 'expo-status-bar';\nimport { StrictMode, useEffect, useState } from 'react';\nimport { StyleSheet, Text, View, FlatList, ScrollView } from 'react-native';\nimport { log, fetchUrl, options, defUrl } from './Common';\nimport { useStore } from './store';\nimport Card from './components/Card';\nimport { createClient } from 'pexels';\n\nexport default function App() {\n  const [word, setWord] = useState([])\n  const [meaning, setMeaning] = useState([])\n  const [source, setSource] = useState([])\n  const data = useStore(state => state.en)\n  const update = useStore(state => state.update)\n  const client = createClient('563492ad6f917000010000010eea3c782765431797c7ea8b8176fb5e');\n  const [q, setQ] = useState([])\n\n  const FetchWords = async () => {\n\n    for (let i = 0; i < 10; i++) {\n      fetch(fetchUrl, options)\n        .then(response => response.json())\n        .then(response => {\n          // console.log(response)\n          update(response)\n        })\n        .catch(err => {\n          log(err)\n        })\n    }\n  }\n\n  const FindImages = async () => {\n    for (let i = 0; i < 10; i++) {\n      let query = q[i]\n      const res = await client.photos.search({ query, per_page: 1 })\n      const photos = res.photos\n      const src = photos.map(photo => photo.src)\n      const medium = src.map(s => s.medium)\n      medium && setSource(medium)\n      log(medium)\n    }\n  }\n\n  const getImages = () => {\n    for (let i = 0; i < 10; i++) {\n      let w = q[i]\n      const options = {\n        method: 'GET',\n        headers: {\n          'X-RapidAPI-Key': '004c008df7msh873d3c4709f2eb3p15615bjsn6188cad98adb',\n          'X-RapidAPI-Host': 'contextualwebsearch-websearch-v1.p.rapidapi.com'\n        }\n      };\n      let baseUrl = 'https://contextualwebsearch-websearch-v1.p.rapidapi.com/api/Search/ImageSearchAPI?q='\n      fetch(baseUrl + w + '&pageNumber=1&pageSize=10&autoCorrect=true', options)\n        .then(response => response.json())\n        .then(response => console.log(response.value.map(e => e.url)))\n        .catch(err => console.error(err));\n    }\n  }\n\n  useEffect(() => {\n    FetchWords();\n    FindImages()\n    // getImages()\n  }, [])\n\n  useEffect(() => {\n    setWord(data.map(item => item.word))\n    setQ(word)\n    // log(data)\n  }, [data])\n\n  return (\n    <ScrollView style={styles.container}>\n      <View style={styles.cards}>\n        {\n          data.map((item) => item.results &&\n            <Card\n              word={item.word} key={item.word}\n              meaning={item.results.map(def => def.definition)}\n              typeOf={item.results.map(def => def.partOfSpeech)}\n              prounciation={item.pronunciation ?\n                (item.pronunciation.all ? (\"\\n/\" + item.pronunciation.all + \"/\") :\n                  (\"\\n/\" + item.pronunciation + \"/\"))\n                : \" \"}\n              src={source[0]}\n            />\n          )\n        }\n      </View>\n      <StatusBar style=\"auto\" />\n    </ScrollView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n  },\n  cards: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    justifyContent: 'space-evenly',\n    alignItems: 'center',\n  }\n});\n"],"sourceRoot":""}