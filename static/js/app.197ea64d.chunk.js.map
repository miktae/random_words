{"version":3,"sources":["Common.js","store.js","components/Card.js","components/TabBar.js","App.js"],"names":["log","console","bind","options","method","headers","useStore","create","set","countWord","incrementWord","state","count","countTrue","updateTrue","i","en","update","data","meaning","updateMeaning","Card","props","useState","sound","playing","setPlaying","iconName","setIconName","checking","setChecking","text","setText","countTrueW","setCountTrueW","useEffect","m","map","item","results","length","undefined","unloadAsync","View","style","styles","card","cardHeader","TextInput","inputText","placeholder","onChangeText","Button","title","button","onPress","word","alert","Alert","Text","textHeader","typeOf","prounciation","name","size","color","icon","w","Speech","setTimeout","checkText","Image","img","source","uri","src","textBody","example","StyleSheet","width","backgroundColor","padding","margin","borderRadius","flexDirection","justifyContent","alignItems","height","borderWidth","marginRight","textAlign","fontSize","marginTop","cursor","defaultProps","tabBar","paddingVertical","paddingHorizontal","TabBar","Linking","openURL","App","setWord","setSource","client","createClient","q","setQ","FetchWords","fetch","then","response","json","catch","err","FindImages","query","medium","photos","search","per_page","photo","s","ScrollView","container","cards","def","definition","partOfSpeech","pronunciation","all","buttonView","TouchableOpacity","buttonText","StatusBar","flex","flexWrap","fontWeight"],"mappings":"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","file":"static/js/app.197ea64d.chunk.js","sourcesContent":["export var log = console.log.bind(console);\r\n\r\nexport const fetchUrl = 'https://wordsapiv1.p.rapidapi.com/words/?random=true';\r\nexport const defUrl = (w) => 'https://wordsapiv1.p.rapidapi.com/words/' + w + '/definitions'\r\n\r\nexport const options = {\r\n      method: 'GET',\r\n      headers: {\r\n        'X-RapidAPI-Key': '004c008df7msh873d3c4709f2eb3p15615bjsn6188cad98adb',\r\n        'X-RapidAPI-Host': 'wordsapiv1.p.rapidapi.com'\r\n      }\r\n    };","import create from 'zustand'\r\n\r\nexport const useStore = create(set => ({\r\n  countWord: 0,\r\n  incrementWord: () => set(state => ({ count: state.count + 1 })),\r\n  countTrue: 0,\r\n  updateTrue: (i) => set(state => ({ countTrue: state.countTrue + i })),\r\n  en: [],\r\n  update: (data) => set(state => ({ en: [...state.en, data] })),\r\n  meaning: [],\r\n  updateMeaning: (data) => set(state => ({ meaning: [...state.meaning, data] }))\r\n}))","import React, { useState, useEffect } from 'react';\r\nimport {\r\n  Text,\r\n  TextInput,\r\n  View,\r\n  StyleSheet,\r\n  Button,\r\n  Image,\r\n  Alert\r\n} from 'react-native';\r\nimport Icon from 'react-native-vector-icons/AntDesign';\r\nimport { WrongAlert } from './RNAlert';\r\n//  --legacy-peer-deps\r\nimport { log } from '../Common'\r\nimport { useStore } from '../store';\r\nimport * as Speech from 'expo-speech';\r\n\r\nexport default function Card(props) {\r\n  const [sound, setSound] = useState();\r\n  const [playing, setPlaying] = useState(false);\r\n  const [iconName, setIconName] = useState('play');\r\n  const [checking, setChecking] = useState(false);\r\n  const [text, setText] = useState('');\r\n  const [en, setEn] = useState([])\r\n  const data = useStore(state => state.en)\r\n  const count = useStore(state => state.countWord)\r\n  const incrementWord = useStore(state => state.incrementWord)\r\n  const countTrue = useStore(state => state.countTrue)\r\n  const updateTrue = useStore(state => state.updateTrue)\r\n  const [countTrueW, setCountTrueW] = useState(0)\r\n\r\n  useEffect(() => {\r\n    let m = data.map(item => item.results);\r\n    for (let i = 0; i < m.length; i++) {\r\n      if (m[i] !== undefined) {\r\n        // log(count)\r\n        incrementWord()\r\n      }\r\n    }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    return sound\r\n      ? () => {\r\n        console.log('Unloading Sound');\r\n        sound.unloadAsync();\r\n      }\r\n      : undefined;\r\n  }, [sound]);\r\n\r\n  const test = () => {\r\n    setChecking(!checking);\r\n  }\r\n\r\n  const checkWord = () => {\r\n    log(text)\r\n    log(props.word)\r\n    \r\n    if (text == props.word) {\r\n      setChecking(false);\r\n      setCountTrueW(countTrueW + 1)\r\n    }\r\n    else {\r\n      setChecking(true);\r\n      if(countTrueW > 0) {\r\n        setCountTrueW(countTrueW - 1)\r\n      }\r\n      else {\r\n        setCountTrueW(0)\r\n      }\r\n      alert(\"Wrong answer!\")\r\n      Alert.alert(\r\n        \"Wrong answer\",\r\n        [\r\n          {\r\n            text: \"Cancel\",\r\n            onPress: () => console.log(\"Cancel Pressed\"),\r\n            style: \"cancel\"\r\n          },\r\n          { text: \"OK\", onPress: () => console.log(\"OK Pressed\") }\r\n        ]\r\n      )\r\n    }\r\n  }\r\n\r\n  useEffect(() => log(countTrue), [])\r\n\r\n  const speak = (w) => {\r\n    if (playing) {\r\n      console.log('Loading Sound');\r\n      setIconName('pausecircle');\r\n      Speech.speak(w);\r\n      setTimeout(() => { setIconName('play') }, 1100)\r\n    } else {\r\n      setIconName('play');\r\n      // await sound.unloadAsync();\r\n    }\r\n  };\r\n\r\n  useEffect(() =>\r\n    {\r\n       log(countTrueW)\r\n       updateTrue(countTrueW)\r\n       log(countTrue)\r\n    }\r\n   , [countTrueW])\r\n\r\n  return (\r\n    <View style={styles.card}>\r\n      <View style={styles.cardHeader}>\r\n        {\r\n          checking ? (\r\n            <>\r\n              <TextInput\r\n                style={styles.inputText}\r\n                placeholder=\"\"\r\n                onChangeText={text => setText(text)}\r\n              />\r\n              <Button title=\"Check\"\r\n                style={styles.button}\r\n                onPress={() => checkWord()} />\r\n            </>) : (\r\n            <Text style={[\r\n              styles.text,\r\n              styles.textHeader\r\n            ]}>\r\n              {props.word} ({props.typeOf == \"noun\"\r\n                ? \"n\" : props.typeOf == \"adjective\"\r\n                  ? \"adj\" : props.typeOf == \"verb\"\r\n                    ? \"v\" : props.typeOf[0] + \", \" + props.typeOf[1]})\r\n              {props.prounciation}\r\n            </Text>)\r\n        }\r\n\r\n        <Icon\r\n          name={iconName}\r\n          size={20} color=\"#000\"\r\n          style={styles.icon}\r\n          onPress={() => {\r\n            setPlaying(true);\r\n            speak(props.word)\r\n          }} />\r\n      </View>\r\n      <Text\r\n        style={styles.checkText}\r\n        onPress={() => { test() }}>\r\n         {!checking ?\r\n          \"Check this word\"\r\n          : \"View\"}\r\n      </Text>\r\n      <Image style={styles.img}\r\n        source={{ uri: props.src }} />\r\n      <Text style={[\r\n        styles.text,\r\n        styles.textBody\r\n      ]}>\r\n        {props.example}\r\n      </Text>\r\n      <Text style={styles.text}>\r\n        {props.meaning}\r\n      </Text>\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  card: {\r\n    width: 300,\r\n    backgroundColor: '#f0f2f5',\r\n    padding: 10,\r\n    margin: 10,\r\n    borderRadius: 7,\r\n  },\r\n  cardHeader: {\r\n    flexDirection: 'row',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n  inputText: {\r\n    height: 30,\r\n    margin: 12,\r\n    borderWidth: 1,\r\n    padding: 10\r\n  },\r\n  button: {\r\n    borderWidth: 1,\r\n    padding: 4\r\n  },\r\n  textHeader: {\r\n    marginRight: 10,\r\n  },\r\n  textBody: {\r\n    textAlign: 'justify',\r\n    fontSize: 18,\r\n  },\r\n  checkText: {\r\n    textAlign: 'center',\r\n    marginTop: 5,\r\n    cursor: 'pointer'\r\n  },\r\n  text: {\r\n    fontSize: 20,\r\n    textAlign: 'center',\r\n  },\r\n  icon: {\r\n    marginTop: 5,\r\n    alignItems: 'center',\r\n  },\r\n  img: {\r\n    width: 300,\r\n    height: 300,\r\n  }\r\n});\r\n\r\nCard.defaultProps = {\r\n  src: \"https://www.seekpng.com/png/detail/968-9681864_apple-png-background-stock-photo-apple-fruit.png\"\r\n}\r\n","import { View, Text, StyleSheet, Linking } from 'react-native'\r\nimport React from 'react'\r\nimport { useStore } from '../store';\r\n\r\nconst TabBar = () => {\r\n    const countTrue = useStore(state => state.countTrue)\r\n\r\n    return (\r\n        <View style={styles.tabBar} >\r\n            <Text>RWs - \r\n                <Text onPress={() =>\r\n                     Linking.openURL('https://www.facebook.com/miktae07')}>\r\n                    @Mik Tae\r\n                </Text>\r\n            </Text>\r\n            <Text>{countTrue} </Text>\r\n        </View>\r\n    )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    tabBar: {\r\n        flexDirection: 'row',\r\n        justifyContent: 'space-between',\r\n        backgroundColor: '#f0f2f5',\r\n        paddingVertical: 10,\r\n        paddingHorizontal: 20,\r\n    }\r\n})\r\n\r\nexport default TabBar","import { StatusBar } from 'expo-status-bar';\nimport { useEffect, useState } from 'react';\nimport { Button, StyleSheet, Text, View, ScrollView, Alert } from 'react-native';\nimport { log, fetchUrl, options, defUrl } from './Common';\nimport { useStore } from './store';\nimport Card from './components/Card';\nimport { createClient } from 'pexels';\nimport { TouchableOpacity } from 'react-native-web';\nimport TabBar from './components/TabBar';\n\nexport default function App() {\n  const [word, setWord] = useState([])\n  const [meaning, setMeaning] = useState([])\n  const [source, setSource] = useState([])\n  const data = useStore(state => state.en)\n  const update = useStore(state => state.update)\n  const client = createClient('563492ad6f917000010000010eea3c782765431797c7ea8b8176fb5e');\n  const [q, setQ] = useState([])\n\n  const FetchWords = async () => {\n\n    for (let i = 0; i < 10; i++) {\n      fetch(fetchUrl, options)\n        .then(response => response.json())\n        .then(response => {\n          // console.log(response)\n          update(response)\n        })\n        .catch(err => {\n          log(err)\n        })\n    }\n  }\n\n  const FindImages = async () => {\n    for (let i = 0; i < 10; i++) {\n      let query = q[i]\n      const res = await client.photos.search({ query, per_page: 1 })\n      const photos = res.photos\n      const src = photos.map(photo => photo.src)\n      const medium = src.map(s => s.medium)\n      medium && setSource(medium)\n      // log(medium)\n    }\n  }\n\n  const Complete = () => {\n    log('Complete');\n  }\n\n  useEffect(() => {\n    FetchWords();\n    FindImages()\n    // getImages()\n  }, [])\n\n  useEffect(() => {\n    setWord(data.map(item => item.word))\n    setQ(word)\n    // log(data)\n  }, [data])\n\n  return (\n    <ScrollView style={styles.container}>\n      <TabBar />\n      <View style={styles.cards}>\n        {\n          data.map((item) => item.results &&\n            <Card\n              word={item.word} key={item.word}\n              meaning={item.results.map(def => def.definition)}\n              typeOf={item.results.map(def => def.partOfSpeech)}\n              prounciation={item.pronunciation ?\n                (item.pronunciation.all ? (\"\\n/\" + item.pronunciation.all + \"/\") :\n                  (\"\\n/\" + item.pronunciation + \"/\"))\n                : \" \"}\n              src={source[0]}\n            />\n          )\n        }\n      </View>\n      <View style={styles.buttonView}>\n        <TouchableOpacity style={styles.button}\n        onPress={() => Complete()}>\n          <Text style={styles.buttonText}>Complete</Text>\n        </TouchableOpacity>\n      </View>\n      <StatusBar style=\"auto\" />\n    </ScrollView >\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n  },\n  cards: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    justifyContent: 'space-evenly',\n    alignItems: 'center',\n  },\n  buttonView: {\n    flexDirection: 'row',\n    justifyContent: 'center',\n    margin: 20\n  },\n  button: {\n    width: 300,\n    backgroundColor: \"blue\",\n    padding: 10\n  },\n  buttonText: {\n    textAlign: 'center',\n    color: '#fff',\n    fontWeight: 'bold',\n  }\n});\n"],"sourceRoot":""}